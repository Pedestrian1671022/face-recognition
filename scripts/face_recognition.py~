#!/usr/bin/env python
# -*- coding: utf8 -*-
from __future__ import print_function
import sys
import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import sys,os,dlib,glob,numpy
from skimage import io

class face_recognition:
    def __init__(self):
        self.predictor_path = "/home/pedestrian-username/catkin_ws/src/face_recognition_dlib/scripts/shape_predictor_68_face_landmarks.dat"
        self.face_rec_model_path = "/home/pedestrian-username/catkin_ws/src/face_recognition_dlib/scripts/dlib_face_recognition_resnet_model_v1.dat"
        self.faces_folder_path = "/home/pedestrian-username/catkin_ws/src/face_recognition_dlib/scripts/candidate"
        self.detector = dlib.get_frontal_face_detector()
        self.sp = dlib.shape_predictor(self.predictor_path)
        self.facerec = dlib.face_recognition_model_v1(self.face_rec_model_path)
        self.descriptors = []
        self.candidate = []
        for f in glob.glob(os.path.join(self.faces_folder_path,"*.jpg")):
            self.candidate.append(f.split("candidate/")[1].split(".")[0])
            print("Processing file: {}".format(f))
            img = io.imread(f)
            dets = self.detector(img,1)
            print("Number of faces detected:{}".format(len(dets)))
            for k,d in enumerate(dets):
                shape = self.sp(img,d)
                face_descriptor = self.facerec.compute_face_descriptor(img,shape)
                v = numpy.array(face_descriptor)
                self.descriptors.append(v)

        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/image_color",Image,self.callback)

    def callback(self,data):
        try:
          cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        dets = self.detector(cv_image,1)
        font = cv2.FONT_HERSHEY_TRIPLEX
        for k,d in enumerate(dets):
            dist = []
            shape = self.sp(cv_image,d)
            face_descriptor = self.facerec.compute_face_descriptor(cv_image,shape)
            d_test = numpy.array(face_descriptor)
            for i in self.descriptors:
                dist_ = numpy.linalg.norm(i-d_test)
                print("miaoshuzi:",dist_)
                dist.append(dist_)
            c_d = dict(zip(self.candidate,dist))
            cd_sorted = sorted(c_d.iteritems(),key=lambda d:d[1])
            cv2.rectangle(cv_image,(d.left(),d.top()),(d.right(),d.bottom()), (255, 0,0))
            cv2.putText(cv_image, cd_sorted[0][0] , (d.left(),d.top()), font, 1, (255, 255, 0), 1,False)
            print("The person is:",cd_sorted[0][0])
        cv2.imshow('image',cv_image)
        cv2.waitKey(1) 


if __name__ == '__main__':
    rospy.init_node('face_recognition', anonymous=True)
    face_recognition()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        pass
